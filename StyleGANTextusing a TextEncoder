import torch
import torch.nn as nn
import torch.nn.functional as F

class TextEncoder(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(TextEncoder, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)
        
    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

class StyleGANText(nn.Module):
    def __init__(self, latent_dim, text_dim, hidden_dim, img_size):
        super(StyleGANText, self).__init__()
        self.latent_dim = latent_dim
        self.text_dim = text_dim
        self.hidden_dim = hidden_dim
        self.img_size = img_size
        self.text_encoder = TextEncoder(text_dim, hidden_dim, latent_dim)
        self.generator = nn.Sequential(
            nn.Linear(latent_dim + text_dim, 4 * 4 * hidden_dim),
            nn.BatchNorm1d(4 * 4 * hidden_dim),
            nn.ReLU(),
            nn.ConvTranspose2d(hidden_dim, hidden_dim // 2, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(hidden_dim // 2),
            nn.ReLU(),
            nn.ConvTranspose2d(hidden_dim // 2, hidden_dim // 4, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(hidden_dim // 4),
            nn.ReLU(),
            nn.ConvTranspose2d(hidden_dim // 4, hidden_dim // 8, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(hidden_dim // 8),
            nn.ReLU(),
            nn.ConvTranspose2d(hidden_dim // 8, 3, kernel_size=4, stride=2, padding=1),
            nn.Tanh(),
        )
        self.discriminator = nn.Sequential(
            nn.Conv2d(3, hidden_dim // 8, kernel_size=4, stride=2, padding=1),
            nn.LeakyReLU(0.2),
            nn.Conv2d(hidden_dim // 8, hidden_dim // 4, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(hidden_dim // 4),
            nn.LeakyReLU(0.2),
            nn.Conv2d(hidden_dim // 4, hidden_dim // 2, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(hidden_dim // 2),
            nn.LeakyReLU(0.2),
            nn.Conv2d(hidden_dim // 2, hidden_dim, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(hidden_dim),
            nn.LeakyReLU(0.2),
            nn.Conv2d(hidden_dim, 1, kernel_size=4, stride=1, padding=0),
            nn.Sigmoid(),
        )
        
    def forward(self, noise, text):
        text_encoding = self.text_encoder(text)
        z = torch.cat([noise, text_encoding], dim=1)
        x = self.generator(z)
        d = self.discriminator(x)
        return x, d
